version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: telegram_sender
      POSTGRES_USER: telegram_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    restart: unless-stopped
    networks:
      - telegram-net
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U telegram_user -d telegram_sender']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - API_ID=${API_ID}
      - API_HASH=${API_HASH}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - DATABASE_URL=postgresql://telegram_user:${POSTGRES_PASSWORD}@postgres:5432/telegram_sender
      - CORS_ORIGINS=${CORS_ORIGINS}
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - RATE_LIMIT_PER_MINUTE=30
      - MAX_RECIPIENTS_PER_MESSAGE=100
    ports:
      - '127.0.0.1:8000:8000' # Only bind to localhost
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./sessions:/app/sessions
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - telegram-net
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NODE_ENV=production
    ports:
      - '127.0.0.1:3000:3000' # Only bind to localhost
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - telegram-net
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3000',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - telegram-net
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  telegram-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
